/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_zhekasmirnov_innercore_api_NativeBlock */

#ifndef _Included_com_zhekasmirnov_innercore_api_NativeBlock
#define _Included_com_zhekasmirnov_innercore_api_NativeBlock
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    constructLiquidBlockPair
 * Signature: (ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;IIZ)[Lcom/reider745/api/CustomManager;
 */
JNIEXPORT jobjectArray JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_constructLiquidBlockPair
  (JNIEnv *, jclass, jint, jstring, jint, jstring, jstring, jint, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getMaterial
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getMaterial
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    isSolid
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_isSolid
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    canContainLiquid
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_canContainLiquid
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    canBeExtraBlock
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_canBeExtraBlock
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getDestroyTime
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getDestroyTime
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getExplosionResistance
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getExplosionResistance
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getFriction
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getFriction
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getTranslucency
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getTranslucency
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getLightLevel
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getLightLevel
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getLightOpacity
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getLightOpacity
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getRenderLayer
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getRenderLayer
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getRenderType
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getRenderType
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    getMapColor
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_getMapColor
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setMaterial
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setMaterial
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setMaterialBase
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setMaterialBase
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setSoundType
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setSoundType
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setSolid
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setSolid
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRenderAllFaces
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRenderAllFaces
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRedstoneTileNative
 * Signature: (IIZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRedstoneTileNative
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRedstoneConnectorNative
 * Signature: (IIZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRedstoneConnectorNative
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRedstoneEmitterNative
 * Signature: (IIZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRedstoneEmitterNative
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setAnimatedTile
 * Signature: (IIZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setAnimatedTile
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setReceivingEntityInsideEvent
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setReceivingEntityInsideEvent
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setReceivingEntityStepOnEvent
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setReceivingEntityStepOnEvent
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setReceivingNeighbourChangeEvent
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setReceivingNeighbourChangeEvent
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setDestroyTime
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setDestroyTime
  (JNIEnv *, jclass, jint, jfloat);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setExplosionResistance
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setExplosionResistance
  (JNIEnv *, jclass, jint, jfloat);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setTranslucency
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setTranslucency
  (JNIEnv *, jclass, jint, jfloat);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setFriction
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setFriction
  (JNIEnv *, jclass, jint, jfloat);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setLightLevel
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setLightLevel
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setLightOpacity
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setLightOpacity
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRenderLayer
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRenderLayer
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setRenderType
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setRenderType
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setBlockColorSource
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setBlockColorSource
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setMapColor
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setMapColor
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setCanContainLiquid
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setCanContainLiquid
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_zhekasmirnov_innercore_api_NativeBlock
 * Method:    setCanBeExtraBlock
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_zhekasmirnov_innercore_api_NativeBlock_setCanBeExtraBlock
  (JNIEnv *, jclass, jint, jboolean);

#ifdef __cplusplus
}
#endif
#endif
